import numpy as npimport pandas as pd import matplotlib.pyplot as plt class Debt:    def __init__(self,                  earner: str,                  name: str,                  balance: float,                  limit: float,                  prime_rate: float,                  apr: float,                  is_floating: False,                  repayment_frequency: str,                  repayment_date: int,                  repayment_principle_prct: float,                  repayment_interest_prct: float,                 revolving=True):                """            earner:                     The person whom the liability belongs to             name:                       The name of the liability            balance:                    The balance currently outstanding on the debt             limit:                      The total amount of credit available on the account             prime_rate:                 The prime rate portion of the account, as determined by the bank             is_floating:                True if the debt has floating interest, False otherwise            apr:                        The effective annual interest rate not including the prime rate, expressed as a float. Therefore, 22% is 0.22            revolving:                  Whether the source of credit is revolving or not.             repayment_frequency:        How frequently payments are made             repayment_date:             The date on each month when the payment is due             repayment_principle_prct:   The % of principle accumulated that must be repaid that month             repayment_interest_prct:    The % of interest accumulated that must be repaid that month        """                    self.earner = earner        self.name = name         self.balance = balance         self.limit = limit         self.available_credit = limit - balance         self.prime_rate = prime_rate        self.non_prime_rate = apr - prime_rate        self.apr = apr        self.annual_interest = self.balance*(self.prime_rate + self.non_prime_rate)        self.daily_interest = self.annual_interest/365        self.is_floating = is_floating         self.revolving=revolving         self.repayment_frequency = repayment_frequency         self.repayment_date = repayment_date        self.repayment_principle_prct = repayment_principle_prct         self.repayment_interest_prct = repayment_interest_prct                 # Okay. I have the basic information. Now what?         # I need to calculate the daily interest cost given this amount.        # I need a way to calculate 0% balance transfers and such             def compound(self):        """            Calculate the new balance after a compounding period             For simplicity, assume all rates are APR, and interest compounds once per month         """                # Approximate the new interest as         self.balance = self.balance*(1 + self.non_prime_rate + self.prime_rate)/12          self.available_credit = self.limit - self.balance         self.annual_interest = self.balance*(self.prime_rate + self.non_prime_rate)        self.daily_interest = self.annual_interest/365         return None            def payment(self, payment_amount):          """            Model a repayment to the credit source          """        self.balance = self.balance - payment_amount         self.available_credit = self.limit - self.balance         return None         def withdrawal(self, withdrawal_amount):         """            Withdrawing money from the credit source                 """        if withdrawal_amount <= self.available_credit:             self.balance += withdrawal_amount             self.available_credit = self.limit - self.balance         else:            assert('Withdrew more than the available balance from this source of credit!')                    def credit_limit_change(self, change):         """            If change is >0, it represents a increase to the credit limit.             If change is <0, it represents a decrease in the available credit limit.         """            self.limit += change         return None                                                 