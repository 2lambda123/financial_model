import numpy as npimport pandas as pd import datetime as dateimport matplotlib.pyplot as plt from concepts import Debt# Okay. Step 1. Model the growth of a test debt that I have, using easily verifiable numbers, to ensure that things are working correctly. def get_current_state(debts):         cs = {        'total_debt': 0,         'total_limit': 0,         'total_available_credit': 0,         'total_annual_interest_due': 0,         'total_monthly_interest_due': 0,         'total_daily_interest_due': 0,         'total_credits_utilization': 0}        # Step 1. Compound the debt and get total payments due.         for debt in debts:                 cs['total_debt'] += debt.balance          cs['total_limit'] += debt.limit        cs['total_available_credit'] += debt.available_credit         cs['total_annual_interest_due'] += debt.annual_interest     cs['total_credit_utilization'] = cs['total_debt']/cs['total_limit']    return cs def load_debts(path='/Users/soren/Desktop/financial_model/data/debts.csv'):    '''        Path: (str): The path to the CSV file holding the debt info.         It should contain the following columns:                     Returns: A dictionary of debt objects, where the key is the debt name         and the value is the debt object.     '''        return {y['name']: Debt(**y) for x, y in pd.read_csv(path).to_dict(orient='index').items()}def plot_results(df_results):    # Total debt over time.     plt.figure()    plt.title('Total debt over time')    plt.xlabel('Month Number')    plt.ylabel('Amount')    plt.grid(True)    plt.plot(df_results['month'], df_results['total_debt'], label='total debt')    plt.plot([0, num_months], [df_results['total_limit'][0], df_results['total_limit'][num_months - 1]], color='red', label='Total available credit limit')    plt.ylim([0, max(df_results['total_limit'])*1.01])    plt.legend()        # Total monthly interest due     plt.figure()     plt.title('Total monthly interest due per month')    plt.xlabel('Month number')    plt.ylabel('Monthly interest cost')    plt.grid(True)    plt.plot(df_results['month'], df_results['total_annual_interest_due']/12)        # Total credit utilization     plt.figure()     plt.title('Percent credit utilization per month')    plt.xlabel('Month number')    plt.ylabel('\% Credit Utilization')    plt.grid(True)    plt.plot(df_results['month'], df_results['total_credit_utilization'], label='\% credit utilization')    plt.plot([0,num_months], [1,1], color='red', label='credit_limit')    plt.ylim([0,1.1])    if __name__ == '__main__':         results = []    num_months = 60    debts = load_debts()            for m in range(0, num_months):                 ms = {'month': m,             'total_debt': 0,             'total_limit': 0,             'total_available_credit': 0,             'total_annual_interest_due': 0,             'total_credit_utilization': 0}        for debt_name, debt in debts.items():             if m > 0:                 debt.compound()                         ms['total_debt'] += debt.balance             ms['total_limit'] += debt.limit             ms['total_available_credit'] += debt.available_credit            ms['total_annual_interest_due'] += debt.annual_interest        ms['total_credit_utilization'] = ms['total_debt']/ms['total_limit']                   results.append(ms)    df_results = pd.DataFrame.from_records(results)    plot_results(df_results)